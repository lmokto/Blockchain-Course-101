{
  "summary": "This course helps you create a blockchain. This would serve as an exercise to understand blockchains in a hands on fashion\nWe\u0027d be covering\na) Blocks\nb) Read/Write blocks\nc) View it using a micro web service\nd) Implement mining with the proof-of-work methodology\ne) Upgrade to blockchains\nf) Construct a node\ng) [WIP] transactions",
  "title": "Blockchain-101",
  "programming_language": "Python",
  "language": "en",
  "items": [
    {
      "id": 0,
      "update_date": "Jan 1, 1970 1:00:00 AM",
      "title": "Session1_Fundamentals",
      "task_list": [
        {
          "name": "block_basics",
          "stepic_id": 0,
          "task_files": {
            "__init__.py": {
              "name": "__init__.py",
              "text": "",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\nLet\u0027s see how a simple block looks - pythonically\u003cbr /\u003e\nA block usually consists of the following :- \u003cbr /\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003cb\u003eSome data\u003c/b\u003e : In bitcoin, this is a message you can write along with your transaction \u003cbr /\u003e\n        For example : \"Home rent\" , \"Pizza\"\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cb\u003e Hash of the previous block\u003c/b\u003e This is very important. This is what connects the blocks and says which\n        one is after which one. \u003ci\u003eThe only exception is the genesis block, i.e the first block\u003c/i\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cb\u003eTimeStamp\u003c/b\u003e This allows you to decide which block was mined earlier. If two blocks were mined together,\n        the one that was mined earlier is accepted\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cb\u003eOther Data\u003c/b\u003e Which include the index, nonce, and other stuff. We will come back to this later\n    \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        },
        {
          "name": "block_syncing",
          "stepic_id": 0,
          "task_files": {
            "__init__.py": {
              "name": "__init__.py",
              "text": "",
              "placeholders": []
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "description_text": "\u003chtml\u003e\nHere, we will learn how to load the blocks \u003cbr /\u003e\nAnd use whatever functions from simple blocks\n\u003cbr /\u003e\nCouple of salient points here (that you should think about) :- \u003cbr /\u003e\n\u003col\u003e\n    \u003cli\u003eWhy are we passing cls? Wouldn\u0027t it make sense to just pass SimpleBlock\u003c/li\u003e\n    \u003cli\u003eHow do we check if a node is valid?\u003c/li\u003e\n    \u003cli\u003eHow are our nodes collected?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cbr\u003e\n\u003c/html\u003e\n",
          "description_format": "html",
          "additional_files": {},
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    },
    {
      "id": 0,
      "update_date": "Jan 1, 1970 1:00:00 AM",
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "task_files": {},
          "test_files": {},
          "description_format": "html",
          "additional_files": {
            "requirements.txt": "flask\n",
            "Session1_Fundamentals/block_basics/chaindata/0.json": "{\n    \"data\": \"I am in block 0\", \n    \"hash\": \"hash placeholder\", \n    \"index\": 0, \n    \"nonce\": 0, \n    \"prev_hash\": null, \n    \"timestamp\": \"2018-09-18 12:10:58.027913\"\n}",
            "test_helper.py": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io \u003d open(path, \"r\")\n    text \u003d file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding\u003d\"utf-8\", path\u003dsys.argv[-1], arg_string\u003d\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc \u003d subprocess.Popen([sys.executable, path], stdin\u003dsubprocess.PIPE, stdout\u003dsubprocess.PIPE,\n                            stderr\u003dsubprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path \u003d sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent \u003d os.path.abspath(os.path.join(path, os.pardir))\n        python_files \u003d [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file \u003d\u003d \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input \u003d patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m\u003d\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        save_input \u003d builtins.input\n        builtins.input \u003d mock_fun\n        return save_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        save_input \u003d __builtin__.raw_input\n        __builtin__.raw_input \u003d mock_fun\n        __builtin__.input \u003d mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        builtins.input \u003d saved_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        __builtin__.raw_input \u003d saved_input\n        __builtin__.input \u003d saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] \u003d\u003d 2 or sys.version_info[1] \u003c 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] \u003d\u003d 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path \u003d sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if len(file_text) \u003e 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if file_text.strip() \u003d\u003d text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text\u003d\"Don\u0027t just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows \u003d get_answer_placeholders()\n\n    for window in windows:\n        if len(window) \u003d\u003d 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default \u0027Congratulations!\u0027 message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message\u003d\"Please, reload the task and try again.\", name\u003dNone):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name\u003dNone):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix \u003d \"#educational_plugin_window \u003d \"\n    path \u003d sys.argv[-1]\n    import os\n\n    file_name_without_extension \u003d os.path.splitext(path)[0]\n    windows_path \u003d file_name_without_extension + \"_windows\"\n    windows \u003d []\n    f \u003d open(windows_path, \"r\")\n    window_text \u003d \"\"\n    first \u003d True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first \u003d False\n            window_text \u003d line[len(prefix):]\n        else:\n            window_text +\u003d line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples\u003d()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) \u003d\u003d 2:\n            output \u003d get_file_output(arg_string\u003dstr(sample[0]))\n            if \"\\n\".join(output) !\u003d sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\n\n    passed()\n\n\ndef run_common_tests(error_text\u003d\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n",
            "Session1_Fundamentals/__init__.py": ""
          },
          "update_date": "Jan 1, 1970 1:00:00 AM",
          "feedback_link": {
            "link_type": "STEPIK"
          },
          "task_type": "edu"
        }
      ],
      "type": "lesson"
    }
  ]
}